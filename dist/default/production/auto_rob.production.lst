

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Aug 15 15:11:48 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F1778
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Version 2.40
    19                           ; Generated 17/11/2021 GMT
    20                           ; 
    21                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F1778 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53     0000                     	;# 
    54     0001                     	;# 
    55     0002                     	;# 
    56     0003                     	;# 
    57     0004                     	;# 
    58     0005                     	;# 
    59     0006                     	;# 
    60     0007                     	;# 
    61     0008                     	;# 
    62     0009                     	;# 
    63     000A                     	;# 
    64     000B                     	;# 
    65     000C                     	;# 
    66     000D                     	;# 
    67     000E                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0016                     	;# 
    75     0017                     	;# 
    76     0018                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001C                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     008C                     	;# 
    87     008D                     	;# 
    88     008E                     	;# 
    89     0090                     	;# 
    90     0091                     	;# 
    91     0092                     	;# 
    92     0093                     	;# 
    93     0094                     	;# 
    94     0095                     	;# 
    95     0096                     	;# 
    96     0097                     	;# 
    97     0098                     	;# 
    98     0099                     	;# 
    99     009A                     	;# 
   100     009B                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     0111                     	;# 
   109     0112                     	;# 
   110     0113                     	;# 
   111     0114                     	;# 
   112     0115                     	;# 
   113     0116                     	;# 
   114     0117                     	;# 
   115     0118                     	;# 
   116     0119                     	;# 
   117     011A                     	;# 
   118     011B                     	;# 
   119     011C                     	;# 
   120     011D                     	;# 
   121     018C                     	;# 
   122     018D                     	;# 
   123     018E                     	;# 
   124     0191                     	;# 
   125     0191                     	;# 
   126     0192                     	;# 
   127     0193                     	;# 
   128     0193                     	;# 
   129     0194                     	;# 
   130     0195                     	;# 
   131     0196                     	;# 
   132     0197                     	;# 
   133     0199                     	;# 
   134     0199                     	;# 
   135     0199                     	;# 
   136     019A                     	;# 
   137     019A                     	;# 
   138     019A                     	;# 
   139     019B                     	;# 
   140     019B                     	;# 
   141     019B                     	;# 
   142     019B                     	;# 
   143     019B                     	;# 
   144     019C                     	;# 
   145     019C                     	;# 
   146     019C                     	;# 
   147     019D                     	;# 
   148     019D                     	;# 
   149     019D                     	;# 
   150     019E                     	;# 
   151     019E                     	;# 
   152     019E                     	;# 
   153     019F                     	;# 
   154     019F                     	;# 
   155     019F                     	;# 
   156     019F                     	;# 
   157     019F                     	;# 
   158     020C                     	;# 
   159     020D                     	;# 
   160     020E                     	;# 
   161     0210                     	;# 
   162     0211                     	;# 
   163     0211                     	;# 
   164     0212                     	;# 
   165     0212                     	;# 
   166     0213                     	;# 
   167     0213                     	;# 
   168     0214                     	;# 
   169     0214                     	;# 
   170     0215                     	;# 
   171     0215                     	;# 
   172     0215                     	;# 
   173     0215                     	;# 
   174     0216                     	;# 
   175     0216                     	;# 
   176     0217                     	;# 
   177     0217                     	;# 
   178     021B                     	;# 
   179     021C                     	;# 
   180     021D                     	;# 
   181     021E                     	;# 
   182     021F                     	;# 
   183     028C                     	;# 
   184     028D                     	;# 
   185     028E                     	;# 
   186     0291                     	;# 
   187     0291                     	;# 
   188     0292                     	;# 
   189     0293                     	;# 
   190     0294                     	;# 
   191     0295                     	;# 
   192     0295                     	;# 
   193     0296                     	;# 
   194     0297                     	;# 
   195     0298                     	;# 
   196     0299                     	;# 
   197     0299                     	;# 
   198     029A                     	;# 
   199     029B                     	;# 
   200     029C                     	;# 
   201     029E                     	;# 
   202     029F                     	;# 
   203     030C                     	;# 
   204     030D                     	;# 
   205     030E                     	;# 
   206     0315                     	;# 
   207     0316                     	;# 
   208     0317                     	;# 
   209     0318                     	;# 
   210     0319                     	;# 
   211     031B                     	;# 
   212     031C                     	;# 
   213     031D                     	;# 
   214     031E                     	;# 
   215     031F                     	;# 
   216     038C                     	;# 
   217     038D                     	;# 
   218     038E                     	;# 
   219     0390                     	;# 
   220     0391                     	;# 
   221     0392                     	;# 
   222     0393                     	;# 
   223     0394                     	;# 
   224     0395                     	;# 
   225     0396                     	;# 
   226     0397                     	;# 
   227     0398                     	;# 
   228     0399                     	;# 
   229     039D                     	;# 
   230     039E                     	;# 
   231     039F                     	;# 
   232     040D                     	;# 
   233     040F                     	;# 
   234     040F                     	;# 
   235     0410                     	;# 
   236     0411                     	;# 
   237     0412                     	;# 
   238     0413                     	;# 
   239     0413                     	;# 
   240     0414                     	;# 
   241     0414                     	;# 
   242     0415                     	;# 
   243     0416                     	;# 
   244     0417                     	;# 
   245     0418                     	;# 
   246     041A                     	;# 
   247     041A                     	;# 
   248     041B                     	;# 
   249     041B                     	;# 
   250     041C                     	;# 
   251     041D                     	;# 
   252     041E                     	;# 
   253     041F                     	;# 
   254     048E                     	;# 
   255     048E                     	;# 
   256     048F                     	;# 
   257     0490                     	;# 
   258     0491                     	;# 
   259     0492                     	;# 
   260     0493                     	;# 
   261     0493                     	;# 
   262     0494                     	;# 
   263     0494                     	;# 
   264     0495                     	;# 
   265     0496                     	;# 
   266     0497                     	;# 
   267     0498                     	;# 
   268     049A                     	;# 
   269     049A                     	;# 
   270     049B                     	;# 
   271     049B                     	;# 
   272     049C                     	;# 
   273     049D                     	;# 
   274     049E                     	;# 
   275     049F                     	;# 
   276     050F                     	;# 
   277     0510                     	;# 
   278     0511                     	;# 
   279     0512                     	;# 
   280     0513                     	;# 
   281     0514                     	;# 
   282     0515                     	;# 
   283     0516                     	;# 
   284     0517                     	;# 
   285     0518                     	;# 
   286     0519                     	;# 
   287     051A                     	;# 
   288     058D                     	;# 
   289     058E                     	;# 
   290     058F                     	;# 
   291     058F                     	;# 
   292     058F                     	;# 
   293     0590                     	;# 
   294     0590                     	;# 
   295     0591                     	;# 
   296     0592                     	;# 
   297     0592                     	;# 
   298     0592                     	;# 
   299     0593                     	;# 
   300     0593                     	;# 
   301     0594                     	;# 
   302     0595                     	;# 
   303     0595                     	;# 
   304     0596                     	;# 
   305     0597                     	;# 
   306     0597                     	;# 
   307     0598                     	;# 
   308     0599                     	;# 
   309     0599                     	;# 
   310     0599                     	;# 
   311     059A                     	;# 
   312     059A                     	;# 
   313     059E                     	;# 
   314     059F                     	;# 
   315     059F                     	;# 
   316     0614                     	;# 
   317     0614                     	;# 
   318     0615                     	;# 
   319     0616                     	;# 
   320     0617                     	;# 
   321     0617                     	;# 
   322     0618                     	;# 
   323     0619                     	;# 
   324     061A                     	;# 
   325     061A                     	;# 
   326     061B                     	;# 
   327     061C                     	;# 
   328     068D                     	;# 
   329     068E                     	;# 
   330     068F                     	;# 
   331     0690                     	;# 
   332     0691                     	;# 
   333     0692                     	;# 
   334     0693                     	;# 
   335     0694                     	;# 
   336     0695                     	;# 
   337     0696                     	;# 
   338     0697                     	;# 
   339     0698                     	;# 
   340     0699                     	;# 
   341     069A                     	;# 
   342     069B                     	;# 
   343     069C                     	;# 
   344     069D                     	;# 
   345     069E                     	;# 
   346     069F                     	;# 
   347     070D                     	;# 
   348     070E                     	;# 
   349     070F                     	;# 
   350     0710                     	;# 
   351     0711                     	;# 
   352     0712                     	;# 
   353     0713                     	;# 
   354     0714                     	;# 
   355     0715                     	;# 
   356     0716                     	;# 
   357     0717                     	;# 
   358     0718                     	;# 
   359     0719                     	;# 
   360     071A                     	;# 
   361     071B                     	;# 
   362     071C                     	;# 
   363     071D                     	;# 
   364     071E                     	;# 
   365     071F                     	;# 
   366     078E                     	;# 
   367     078F                     	;# 
   368     0790                     	;# 
   369     0791                     	;# 
   370     0792                     	;# 
   371     0793                     	;# 
   372     0794                     	;# 
   373     0795                     	;# 
   374     0796                     	;# 
   375     0797                     	;# 
   376     0798                     	;# 
   377     0799                     	;# 
   378     079A                     	;# 
   379     079B                     	;# 
   380     079C                     	;# 
   381     079D                     	;# 
   382     079E                     	;# 
   383     079F                     	;# 
   384     080D                     	;# 
   385     080E                     	;# 
   386     080F                     	;# 
   387     0810                     	;# 
   388     0811                     	;# 
   389     0812                     	;# 
   390     0813                     	;# 
   391     0814                     	;# 
   392     0815                     	;# 
   393     0816                     	;# 
   394     0817                     	;# 
   395     0818                     	;# 
   396     0819                     	;# 
   397     081A                     	;# 
   398     081B                     	;# 
   399     081C                     	;# 
   400     081D                     	;# 
   401     081E                     	;# 
   402     081F                     	;# 
   403     090C                     	;# 
   404     090D                     	;# 
   405     090E                     	;# 
   406     090F                     	;# 
   407     0910                     	;# 
   408     0911                     	;# 
   409     0912                     	;# 
   410     0913                     	;# 
   411     0914                     	;# 
   412     0915                     	;# 
   413     0916                     	;# 
   414     0917                     	;# 
   415     0D8E                     	;# 
   416     0D8F                     	;# 
   417     0D90                     	;# 
   418     0D91                     	;# 
   419     0D91                     	;# 
   420     0D92                     	;# 
   421     0D93                     	;# 
   422     0D93                     	;# 
   423     0D94                     	;# 
   424     0D95                     	;# 
   425     0D95                     	;# 
   426     0D96                     	;# 
   427     0D97                     	;# 
   428     0D97                     	;# 
   429     0D98                     	;# 
   430     0D99                     	;# 
   431     0D99                     	;# 
   432     0D9A                     	;# 
   433     0D9B                     	;# 
   434     0D9C                     	;# 
   435     0D9C                     	;# 
   436     0D9D                     	;# 
   437     0D9D                     	;# 
   438     0D9E                     	;# 
   439     0D9F                     	;# 
   440     0DA0                     	;# 
   441     0DA1                     	;# 
   442     0DA1                     	;# 
   443     0DA2                     	;# 
   444     0DA3                     	;# 
   445     0DA3                     	;# 
   446     0DA4                     	;# 
   447     0DA5                     	;# 
   448     0DA5                     	;# 
   449     0DA6                     	;# 
   450     0DA7                     	;# 
   451     0DA7                     	;# 
   452     0DA8                     	;# 
   453     0DA9                     	;# 
   454     0DA9                     	;# 
   455     0DAA                     	;# 
   456     0DAB                     	;# 
   457     0DAC                     	;# 
   458     0DAC                     	;# 
   459     0DAD                     	;# 
   460     0DAD                     	;# 
   461     0DAE                     	;# 
   462     0DAF                     	;# 
   463     0DB0                     	;# 
   464     0DB1                     	;# 
   465     0DB1                     	;# 
   466     0DB2                     	;# 
   467     0DB3                     	;# 
   468     0DB3                     	;# 
   469     0DB4                     	;# 
   470     0DB5                     	;# 
   471     0DB5                     	;# 
   472     0DB6                     	;# 
   473     0DB7                     	;# 
   474     0DB7                     	;# 
   475     0DB8                     	;# 
   476     0DB9                     	;# 
   477     0DB9                     	;# 
   478     0DBA                     	;# 
   479     0DBB                     	;# 
   480     0DBC                     	;# 
   481     0DBC                     	;# 
   482     0DBD                     	;# 
   483     0DBD                     	;# 
   484     0DBE                     	;# 
   485     0DBF                     	;# 
   486     0DC0                     	;# 
   487     0E0C                     	;# 
   488     0E0D                     	;# 
   489     0E0E                     	;# 
   490     0E0F                     	;# 
   491     0E10                     	;# 
   492     0E11                     	;# 
   493     0E12                     	;# 
   494     0E13                     	;# 
   495     0E14                     	;# 
   496     0E15                     	;# 
   497     0E15                     	;# 
   498     0E15                     	;# 
   499     0E16                     	;# 
   500     0E16                     	;# 
   501     0E16                     	;# 
   502     0E17                     	;# 
   503     0E17                     	;# 
   504     0E17                     	;# 
   505     0E18                     	;# 
   506     0E18                     	;# 
   507     0E18                     	;# 
   508     0E19                     	;# 
   509     0E1A                     	;# 
   510     0E1B                     	;# 
   511     0E1D                     	;# 
   512     0E1E                     	;# 
   513     0E1F                     	;# 
   514     0E21                     	;# 
   515     0E22                     	;# 
   516     0E23                     	;# 
   517     0E24                     	;# 
   518     0E25                     	;# 
   519     0E26                     	;# 
   520     0E27                     	;# 
   521     0E28                     	;# 
   522     0E29                     	;# 
   523     0E2D                     	;# 
   524     0E2E                     	;# 
   525     0E2F                     	;# 
   526     0E30                     	;# 
   527     0E31                     	;# 
   528     0E32                     	;# 
   529     0E35                     	;# 
   530     0E36                     	;# 
   531     0E37                     	;# 
   532     0E38                     	;# 
   533     0E39                     	;# 
   534     0E3A                     	;# 
   535     0E3B                     	;# 
   536     0E3C                     	;# 
   537     0E3D                     	;# 
   538     0E3E                     	;# 
   539     0E90                     	;# 
   540     0E91                     	;# 
   541     0E92                     	;# 
   542     0E93                     	;# 
   543     0E94                     	;# 
   544     0E95                     	;# 
   545     0E96                     	;# 
   546     0E97                     	;# 
   547     0E98                     	;# 
   548     0E99                     	;# 
   549     0E9A                     	;# 
   550     0E9B                     	;# 
   551     0E9C                     	;# 
   552     0E9D                     	;# 
   553     0E9E                     	;# 
   554     0E9F                     	;# 
   555     0EA0                     	;# 
   556     0EA1                     	;# 
   557     0EA2                     	;# 
   558     0EA3                     	;# 
   559     0EA4                     	;# 
   560     0EA5                     	;# 
   561     0EA6                     	;# 
   562     0EA7                     	;# 
   563     0F0F                     	;# 
   564     0F10                     	;# 
   565     0F11                     	;# 
   566     0F12                     	;# 
   567     0F13                     	;# 
   568     0F14                     	;# 
   569     0F15                     	;# 
   570     0F16                     	;# 
   571     0F17                     	;# 
   572     0F18                     	;# 
   573     0F19                     	;# 
   574     0F1A                     	;# 
   575     0F1B                     	;# 
   576     0F1C                     	;# 
   577     0F1D                     	;# 
   578     0F1E                     	;# 
   579     0F1F                     	;# 
   580     0F20                     	;# 
   581     0F21                     	;# 
   582     0F22                     	;# 
   583     0F23                     	;# 
   584     0F24                     	;# 
   585     0F25                     	;# 
   586     0F26                     	;# 
   587     0F27                     	;# 
   588     0F28                     	;# 
   589     0F29                     	;# 
   590     0F2A                     	;# 
   591     0F2B                     	;# 
   592     0F2C                     	;# 
   593     0F2D                     	;# 
   594     0F2E                     	;# 
   595     0F2F                     	;# 
   596     0F30                     	;# 
   597     0F31                     	;# 
   598     0F32                     	;# 
   599     0F33                     	;# 
   600     0F34                     	;# 
   601     0F35                     	;# 
   602     0F36                     	;# 
   603     0F37                     	;# 
   604     0FE4                     	;# 
   605     0FE5                     	;# 
   606     0FE6                     	;# 
   607     0FE7                     	;# 
   608     0FE8                     	;# 
   609     0FE9                     	;# 
   610     0FEA                     	;# 
   611     0FEB                     	;# 
   612     0FED                     	;# 
   613     0FEE                     	;# 
   614     0FEF                     	;# 
   615     000C                     _PORTAbits	set	12
   616     0097                     _OPTION_REGbits	set	151
   617     008E                     _TRISC	set	142
   618     008D                     _TRISB	set	141
   619     008C                     _TRISA	set	140
   620     009B                     _OSCCON	set	155
   621     010E                     _LATCbits	set	270
   622     010C                     _LATAbits	set	268
   623     010E                     _LATC	set	270
   624     010D                     _LATB	set	269
   625     010C                     _LATA	set	268
   626     018E                     _ANSELC	set	398
   627     018D                     _ANSELB	set	397
   628     018C                     _ANSELA	set	396
   629     020E                     _WPUC	set	526
   630     020D                     _WPUB	set	525
   631     020C                     _WPUA	set	524
   632     0291                     _CCPR1L	set	657
   633     0292                     _CCPR1H	set	658
   634     029E                     _CCPTMRS1bits	set	670
   635     0293                     _CCP1CON	set	659
   636     029F                     _CCPTMRS2bits	set	671
   637     0494                     _T2PR	set	1172
   638     0495                     _T2CON	set	1173
   639     0497                     _T2CLKCONbits	set	1175
   640     061A                     _PWM9DCL	set	1562
   641     061B                     _PWM9DCH	set	1563
   642     061C                     _PWM9CON	set	1564
   643     0617                     _PWM4DCL	set	1559
   644     0618                     _PWM4DCH	set	1560
   645     0619                     _PWM4CON	set	1561
   646     0614                     _PWM3DCL	set	1556
   647     0615                     _PWM3DCH	set	1557
   648     0616                     _PWM3CON	set	1558
   649     0EA2                     _RC2PPS	set	3746
   650     0EA0                     _RC0PPS	set	3744
   651     0E96                     _RA6PPS	set	3734
   652     0E94                     _RA4PPS	set	3732
   653     0EA3                     _RC3PPS	set	3747
   654     0EA1                     _RC1PPS	set	3745
   655     0E97                     _RA7PPS	set	3735
   656     0E95                     _RA5PPS	set	3733
   657                           
   658                           	psect	cinit
   659     07FD                     start_initialization:	
   660                           ; #config settings
   661                           
   662     07FD                     __initialization:
   663     07FD                     end_of_initialization:	
   664                           ;End of C runtime variable initialization code
   665                           
   666     07FD                     __end_of__initialization:
   667     07FD  0020               	movlb	0
   668     07FE  3187  2F1A         	ljmp	_main	;jump to C main() function
   669                           
   670                           	psect	cstackCOMMON
   671     0070                     __pcstackCOMMON:
   672     0070                     ?_main:
   673     0070                     ?_PushSwitchRead:	
   674                           ; 1 bytes @ 0x0
   675                           
   676     0070                     ?___wmul:	
   677                           ; 2 bytes @ 0x0
   678                           
   679     0070                     ___wmul@multiplier:	
   680                           ; 2 bytes @ 0x0
   681                           
   682                           
   683                           ; 2 bytes @ 0x0
   684     0070                     	ds	2
   685     0072                     ??_PushSwitchRead:
   686     0072                     ___wmul@multiplicand:	
   687                           ; 1 bytes @ 0x2
   688                           
   689                           
   690                           ; 2 bytes @ 0x2
   691     0072                     	ds	2
   692     0074                     ??___wmul:
   693     0074                     ___wmul@product:	
   694                           ; 1 bytes @ 0x4
   695                           
   696                           
   697                           ; 2 bytes @ 0x4
   698     0074                     	ds	2
   699     0076                     ?_motorA:
   700     0076                     ?_motorB:	
   701                           ; 1 bytes @ 0x6
   702                           
   703     0076                     ?_motorD:	
   704                           ; 1 bytes @ 0x6
   705                           
   706     0076                     ?_motorC:	
   707                           ; 1 bytes @ 0x6
   708                           
   709     0076                     motorA@duty:	
   710                           ; 1 bytes @ 0x6
   711                           
   712     0076                     motorB@duty:	
   713                           ; 2 bytes @ 0x6
   714                           
   715     0076                     motorC@duty:	
   716                           ; 2 bytes @ 0x6
   717                           
   718     0076                     motorD@duty:	
   719                           ; 2 bytes @ 0x6
   720                           
   721                           
   722                           ; 2 bytes @ 0x6
   723     0076                     	ds	2
   724     0078                     ??_motorA:
   725     0078                     ??_motorB:	
   726                           ; 1 bytes @ 0x8
   727                           
   728     0078                     ??_motorD:	
   729                           ; 1 bytes @ 0x8
   730                           
   731     0078                     ??_motorC:	
   732                           ; 1 bytes @ 0x8
   733                           
   734                           
   735                           ; 1 bytes @ 0x8
   736     0078                     	ds	2
   737     007A                     ??_main:
   738                           
   739                           ; 1 bytes @ 0xA
   740     007A                     	ds	1
   741                           
   742                           	psect	cstackBANK0
   743     0020                     __pcstackBANK0:
   744     0020                     main@i:
   745                           
   746                           ; 2 bytes @ 0x0
   747     0020                     	ds	2
   748     0022                     main@i_287:
   749                           
   750                           ; 2 bytes @ 0x2
   751     0022                     	ds	2
   752                           
   753                           	psect	maintext
   754     071A                     __pmaintext:	
   755 ;;
   756 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   757 ;;
   758 ;; *************** function _main *****************
   759 ;; Defined at:
   760 ;;		line 46 in file "main.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;  i               2    2[BANK0 ] int 
   765 ;;  i               2    0[BANK0 ] int 
   766 ;; Return value:  Size  Location     Type
   767 ;;                  1    wreg      void 
   768 ;; Registers used:
   769 ;;		wreg, status,2, status,0, pclath, cstack
   770 ;; Tracked objects:
   771 ;;		On entry : B1F/0
   772 ;;		On exit  : 0/0
   773 ;;		Unchanged: 0/0
   774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
   775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
   776 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
   777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
   778 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
   779 ;;Total ram usage:        5 bytes
   780 ;; Hardware stack levels required when called: 2
   781 ;; This function calls:
   782 ;;		_PushSwitchRead
   783 ;;		_motorA
   784 ;;		_motorB
   785 ;;		_motorC
   786 ;;		_motorD
   787 ;; This function is called by:
   788 ;;		Startup code after reset
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792     071A                     _main:	
   793                           ;psect for function _main
   794                           
   795     071A                     l1127:	
   796                           ;incstack = 0
   797                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   798                           
   799                           
   800                           ;main.c: 48:     OSCCON = 0b11110000;
   801     071A  30F0               	movlw	240
   802     071B  0021               	movlb	1	; select bank1
   803     071C  009B               	movwf	27	;volatile
   804     071D                     l1129:
   805                           
   806                           ;main.c: 51:     ANSELA = 0x00;
   807     071D  0023               	movlb	3	; select bank3
   808     071E  018C               	clrf	12	;volatile
   809     071F                     l1131:
   810                           
   811                           ;main.c: 52:     ANSELB = 0b00001111;
   812     071F  300F               	movlw	15
   813     0720  008D               	movwf	13	;volatile
   814                           
   815                           ;main.c: 53:     ANSELC = 0x00;
   816     0721  018E               	clrf	14	;volatile
   817     0722                     l1133:
   818                           
   819                           ;main.c: 54:     TRISA = 0b00001111;
   820     0722  300F               	movlw	15
   821     0723  0021               	movlb	1	; select bank1
   822     0724  008C               	movwf	12	;volatile
   823     0725                     l1135:
   824                           
   825                           ;main.c: 55:     TRISB = 0b00101111;
   826     0725  302F               	movlw	47
   827     0726  008D               	movwf	13	;volatile
   828                           
   829                           ;main.c: 56:     TRISC = 0x00;
   830     0727  018E               	clrf	14	;volatile
   831                           
   832                           ;main.c: 57:     LATA = 0x00;
   833     0728  0022               	movlb	2	; select bank2
   834     0729  018C               	clrf	12	;volatile
   835                           
   836                           ;main.c: 58:     LATB = 0x00;
   837     072A  018D               	clrf	13	;volatile
   838                           
   839                           ;main.c: 59:     LATC = 0x00;
   840     072B  018E               	clrf	14	;volatile
   841     072C                     l1137:
   842                           
   843                           ;main.c: 62:     OPTION_REGbits.nWPUEN = 0;
   844     072C  0021               	movlb	1	; select bank1
   845     072D  1397               	bcf	23,7	;volatile
   846     072E                     l1139:
   847                           
   848                           ;main.c: 63:     WPUA = 0b00001111;
   849     072E  300F               	movlw	15
   850     072F  0024               	movlb	4	; select bank4
   851     0730  008C               	movwf	12	;volatile
   852     0731                     l1141:
   853                           
   854                           ;main.c: 64:     WPUB = 0x00;
   855     0731  018D               	clrf	13	;volatile
   856     0732                     l1143:
   857                           
   858                           ;main.c: 65:     WPUC = 0x00;
   859     0732  018E               	clrf	14	;volatile
   860     0733                     l1145:
   861                           
   862                           ;main.c: 68:     T2CLKCONbits.CS = 0b0001;
   863     0733  0029               	movlb	9	; select bank9
   864     0734  0817               	movf	23,w	;volatile
   865     0735  39F0               	andlw	-16
   866     0736  3801               	iorlw	1
   867     0737  0097               	movwf	23	;volatile
   868     0738                     l1147:
   869                           
   870                           ;main.c: 69:     T2CON = 0b10000000;
   871     0738  3080               	movlw	128
   872     0739  0095               	movwf	21	;volatile
   873     073A                     l1149:
   874                           
   875                           ;main.c: 70:     T2PR = 0xFF;
   876     073A  30FF               	movlw	255
   877     073B  0094               	movwf	20	;volatile
   878     073C                     l1151:
   879                           
   880                           ;main.c: 73:     RA5PPS = 0b011001;
   881     073C  3019               	movlw	25
   882     073D  003D               	movlb	29	; select bank29
   883     073E  0095               	movwf	21	;volatile
   884     073F                     l1153:
   885                           
   886                           ;main.c: 74:     PWM3CON = 0b10000000;
   887     073F  3080               	movlw	128
   888     0740  002C               	movlb	12	; select bank12
   889     0741  0096               	movwf	22	;volatile
   890     0742                     l1155:
   891                           
   892                           ;main.c: 75:     CCPTMRS2bits.P3TSEL = 0b00;
   893     0742  30FC               	movlw	-4
   894     0743  0025               	movlb	5	; select bank5
   895     0744  059F               	andwf	31,f	;volatile
   896     0745                     l1157:
   897                           
   898                           ;main.c: 76:     PWM3DCH = 0x00;
   899     0745  002C               	movlb	12	; select bank12
   900     0746  0195               	clrf	21	;volatile
   901     0747                     l1159:
   902                           
   903                           ;main.c: 77:     PWM3DCL = 0x00;
   904     0747  0194               	clrf	20	;volatile
   905     0748                     l1161:
   906                           
   907                           ;main.c: 80:     RA7PPS = 0b011010;
   908     0748  301A               	movlw	26
   909     0749  003D               	movlb	29	; select bank29
   910     074A  0097               	movwf	23	;volatile
   911     074B                     l1163:
   912                           
   913                           ;main.c: 81:     PWM4CON = 0b10000000;
   914     074B  3080               	movlw	128
   915     074C  002C               	movlb	12	; select bank12
   916     074D  0099               	movwf	25	;volatile
   917     074E                     l1165:
   918                           
   919                           ;main.c: 82:     CCPTMRS2bits.P4TSEL = 0b00;
   920     074E  30F3               	movlw	-13
   921     074F  0025               	movlb	5	; select bank5
   922     0750  059F               	andwf	31,f	;volatile
   923     0751                     l1167:
   924                           
   925                           ;main.c: 83:     PWM4DCH = 0x00;
   926     0751  002C               	movlb	12	; select bank12
   927     0752  0198               	clrf	24	;volatile
   928     0753                     l1169:
   929                           
   930                           ;main.c: 84:     PWM4DCL = 0x00;
   931     0753  0197               	clrf	23	;volatile
   932     0754                     l1171:
   933                           
   934                           ;main.c: 87:     RC1PPS = 0b011011;
   935     0754  301B               	movlw	27
   936     0755  003D               	movlb	29	; select bank29
   937     0756  00A1               	movwf	33	;volatile
   938     0757                     l1173:
   939                           
   940                           ;main.c: 88:     PWM9CON = 0b10000000;
   941     0757  3080               	movlw	128
   942     0758  002C               	movlb	12	; select bank12
   943     0759  009C               	movwf	28	;volatile
   944     075A                     l1175:
   945                           
   946                           ;main.c: 89:     CCPTMRS2bits.P9TSEL = 0b00;
   947     075A  30CF               	movlw	-49
   948     075B  0025               	movlb	5	; select bank5
   949     075C  059F               	andwf	31,f	;volatile
   950     075D                     l1177:
   951                           
   952                           ;main.c: 90:     PWM9DCH = 0x00;
   953     075D  002C               	movlb	12	; select bank12
   954     075E  019B               	clrf	27	;volatile
   955     075F                     l1179:
   956                           
   957                           ;main.c: 91:     PWM9DCL = 0x00;
   958     075F  019A               	clrf	26	;volatile
   959     0760                     l1181:
   960                           
   961                           ;main.c: 94:     RC3PPS = 0b010101;
   962     0760  3015               	movlw	21
   963     0761  003D               	movlb	29	; select bank29
   964     0762  00A3               	movwf	35	;volatile
   965     0763                     l1183:
   966                           
   967                           ;main.c: 95:     CCP1CON = 0b10011100;
   968     0763  309C               	movlw	156
   969     0764  0025               	movlb	5	; select bank5
   970     0765  0093               	movwf	19	;volatile
   971     0766                     l1185:
   972                           
   973                           ;main.c: 96:     CCPTMRS1bits.C1TSEL = 0b00;
   974     0766  30FC               	movlw	-4
   975     0767  059E               	andwf	30,f	;volatile
   976     0768                     l1187:
   977                           
   978                           ;main.c: 97:     CCPR1H = 0x00;
   979     0768  0192               	clrf	18	;volatile
   980     0769                     l1189:
   981                           
   982                           ;main.c: 98:     CCPR1L = 0x00;
   983     0769  0191               	clrf	17	;volatile
   984     076A                     l1191:
   985                           
   986                           ;main.c: 104:         for(int i = -600; i <= 600; i++){
   987     076A  30A8               	movlw	168
   988     076B  0020               	movlb	0	; select bank0
   989     076C  00A0               	movwf	main@i
   990     076D  30FD               	movlw	253
   991     076E  00A1               	movwf	main@i+1
   992     076F                     l1197:
   993                           
   994                           ;main.c: 106:             motorA(i);
   995     076F  0020               	movlb	0	; select bank0
   996     0770  0821               	movf	main@i+1,w
   997     0771  00F7               	movwf	motorA@duty+1
   998     0772  0820               	movf	main@i,w
   999     0773  00F6               	movwf	motorA@duty
  1000     0774  3185  254E  3187   	fcall	_motorA
  1001                           
  1002                           ;main.c: 107:             motorB(i);
  1003     0777  0020               	movlb	0	; select bank0
  1004     0778  0821               	movf	main@i+1,w
  1005     0779  00F7               	movwf	motorB@duty+1
  1006     077A  0820               	movf	main@i,w
  1007     077B  00F6               	movwf	motorB@duty
  1008     077C  3185  25C1  3187   	fcall	_motorB
  1009                           
  1010                           ;main.c: 108:             if(PushSwitchRead()){
  1011     077F  3185  2522  3187   	fcall	_PushSwitchRead
  1012     0782  0870               	movf	?_PushSwitchRead,w
  1013     0783  0471               	iorwf	?_PushSwitchRead+1,w
  1014     0784  1903               	btfsc	3,2
  1015     0785  2F87               	goto	u451
  1016     0786  2F88               	goto	u450
  1017     0787                     u451:
  1018     0787  2F98               	goto	l1201
  1019     0788                     u450:
  1020     0788                     l1199:
  1021                           
  1022                           ;main.c: 109:                 motorD(i);
  1023     0788  0020               	movlb	0	; select bank0
  1024     0789  0821               	movf	main@i+1,w
  1025     078A  00F7               	movwf	motorD@duty+1
  1026     078B  0820               	movf	main@i,w
  1027     078C  00F6               	movwf	motorD@duty
  1028     078D  3186  26A7  3187   	fcall	_motorD
  1029                           
  1030                           ;main.c: 110:                 motorC(i);
  1031     0790  0020               	movlb	0	; select bank0
  1032     0791  0821               	movf	main@i+1,w
  1033     0792  00F7               	movwf	motorC@duty+1
  1034     0793  0820               	movf	main@i,w
  1035     0794  00F6               	movwf	motorC@duty
  1036     0795  3186  2634  3187   	fcall	_motorC
  1037     0798                     l1201:	
  1038                           ;main.c: 111:             }
  1039                           
  1040                           
  1041                           ;main.c: 113:             _delay((unsigned long)((10)*(32000000/4000.0)));
  1042     0798  3068               	movlw	104
  1043     0799  00FA               	movwf	??_main
  1044     079A  30E4               	movlw	228
  1045     079B                     u497:
  1046     079B  0B89               	decfsz	9,f
  1047     079C  2F9B               	goto	u497
  1048     079D  0BFA               	decfsz	??_main,f
  1049     079E  2F9B               	goto	u497
  1050     079F  3200               	nop2
  1051                           
  1052                           ;main.c: 114:         }
  1053     07A0  3001               	movlw	1
  1054     07A1  0020               	movlb	0	; select bank0
  1055     07A2  07A0               	addwf	main@i,f
  1056     07A3  3000               	movlw	0
  1057     07A4  3DA1               	addwfc	main@i+1,f
  1058     07A5  0821               	movf	main@i+1,w
  1059     07A6  3A80               	xorlw	128
  1060     07A7  00FA               	movwf	??_main
  1061     07A8  3082               	movlw	130
  1062     07A9  027A               	subwf	??_main,w
  1063     07AA  1D03               	skipz
  1064     07AB  2FAE               	goto	u465
  1065     07AC  3059               	movlw	89
  1066     07AD  0220               	subwf	main@i,w
  1067     07AE                     u465:
  1068     07AE  1C03               	skipc
  1069     07AF  2FB1               	goto	u461
  1070     07B0  2FB2               	goto	u460
  1071     07B1                     u461:
  1072     07B1  2F6F               	goto	l1197
  1073     07B2                     u460:
  1074     07B2                     l1203:
  1075                           
  1076                           ;main.c: 115:         for(int i = 600; i >= -600; i--){
  1077     07B2  3058               	movlw	88
  1078     07B3  0020               	movlb	0	; select bank0
  1079     07B4  00A2               	movwf	main@i_287
  1080     07B5  3002               	movlw	2
  1081     07B6  00A3               	movwf	main@i_287+1
  1082     07B7                     l1207:
  1083                           
  1084                           ;main.c: 116:             motorA(i);
  1085     07B7  0020               	movlb	0	; select bank0
  1086     07B8  0823               	movf	main@i_287+1,w
  1087     07B9  00F7               	movwf	motorA@duty+1
  1088     07BA  0822               	movf	main@i_287,w
  1089     07BB  00F6               	movwf	motorA@duty
  1090     07BC  3185  254E  3187   	fcall	_motorA
  1091                           
  1092                           ;main.c: 117:             motorB(i);
  1093     07BF  0020               	movlb	0	; select bank0
  1094     07C0  0823               	movf	main@i_287+1,w
  1095     07C1  00F7               	movwf	motorB@duty+1
  1096     07C2  0822               	movf	main@i_287,w
  1097     07C3  00F6               	movwf	motorB@duty
  1098     07C4  3185  25C1  3187   	fcall	_motorB
  1099                           
  1100                           ;main.c: 118:             if(PushSwitchRead()){
  1101     07C7  3185  2522  3187   	fcall	_PushSwitchRead
  1102     07CA  0870               	movf	?_PushSwitchRead,w
  1103     07CB  0471               	iorwf	?_PushSwitchRead+1,w
  1104     07CC  1903               	btfsc	3,2
  1105     07CD  2FCF               	goto	u471
  1106     07CE  2FD0               	goto	u470
  1107     07CF                     u471:
  1108     07CF  2FE0               	goto	l1211
  1109     07D0                     u470:
  1110     07D0                     l1209:
  1111                           
  1112                           ;main.c: 119:                 motorD(i);
  1113     07D0  0020               	movlb	0	; select bank0
  1114     07D1  0823               	movf	main@i_287+1,w
  1115     07D2  00F7               	movwf	motorD@duty+1
  1116     07D3  0822               	movf	main@i_287,w
  1117     07D4  00F6               	movwf	motorD@duty
  1118     07D5  3186  26A7  3187   	fcall	_motorD
  1119                           
  1120                           ;main.c: 120:                 motorC(i);
  1121     07D8  0020               	movlb	0	; select bank0
  1122     07D9  0823               	movf	main@i_287+1,w
  1123     07DA  00F7               	movwf	motorC@duty+1
  1124     07DB  0822               	movf	main@i_287,w
  1125     07DC  00F6               	movwf	motorC@duty
  1126     07DD  3186  2634  3187   	fcall	_motorC
  1127     07E0                     l1211:	
  1128                           ;main.c: 121:             }
  1129                           
  1130                           
  1131                           ;main.c: 123:             _delay((unsigned long)((10)*(32000000/4000.0)));
  1132     07E0  3068               	movlw	104
  1133     07E1  00FA               	movwf	??_main
  1134     07E2  30E4               	movlw	228
  1135     07E3                     u507:
  1136     07E3  0B89               	decfsz	9,f
  1137     07E4  2FE3               	goto	u507
  1138     07E5  0BFA               	decfsz	??_main,f
  1139     07E6  2FE3               	goto	u507
  1140     07E7  3200               	nop2
  1141                           
  1142                           ;main.c: 124:         }
  1143     07E8  30FF               	movlw	255
  1144     07E9  0020               	movlb	0	; select bank0
  1145     07EA  07A2               	addwf	main@i_287,f
  1146     07EB  30FF               	movlw	255
  1147     07EC  3DA3               	addwfc	main@i_287+1,f
  1148     07ED  0823               	movf	main@i_287+1,w
  1149     07EE  3A80               	xorlw	128
  1150     07EF  00FA               	movwf	??_main
  1151     07F0  307D               	movlw	125
  1152     07F1  027A               	subwf	??_main,w
  1153     07F2  1D03               	skipz
  1154     07F3  2FF6               	goto	u485
  1155     07F4  30A8               	movlw	168
  1156     07F5  0222               	subwf	main@i_287,w
  1157     07F6                     u485:
  1158     07F6  1803               	skipnc
  1159     07F7  2FF9               	goto	u481
  1160     07F8  2FFA               	goto	u480
  1161     07F9                     u481:
  1162     07F9  2FB7               	goto	l1207
  1163     07FA                     u480:
  1164     07FA  2F6A               	goto	l1191
  1165     07FB  3180  2802         	ljmp	start
  1166     07FD                     __end_of_main:
  1167                           
  1168                           	psect	text1
  1169     06A7                     __ptext1:	
  1170 ;; *************** function _motorD *****************
  1171 ;; Defined at:
  1172 ;;		line 223 in file "main.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;  duty            2    6[COMMON] int 
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, status,2, status,0, pclath, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  1186 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1188 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1189 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1190 ;;Total ram usage:        4 bytes
  1191 ;; Hardware stack levels used: 1
  1192 ;; Hardware stack levels required when called: 1
  1193 ;; This function calls:
  1194 ;;		___wmul
  1195 ;; This function is called by:
  1196 ;;		_main
  1197 ;; This function uses a non-reentrant model
  1198 ;;
  1199                           
  1200     06A7                     _motorD:	
  1201                           ;psect for function _motorD
  1202                           
  1203     06A7                     l1051:	
  1204                           ;incstack = 0
  1205                           ; Regs used in _motorD: [wreg+status,2+status,0+pclath+cstack]
  1206                           
  1207                           
  1208                           ;main.c: 225:     duty > 600 ? (duty = 600) : duty;
  1209     06A7  0877               	movf	motorD@duty+1,w
  1210     06A8  3A80               	xorlw	128
  1211     06A9  00F8               	movwf	??_motorD
  1212     06AA  3082               	movlw	130
  1213     06AB  0278               	subwf	??_motorD,w
  1214     06AC  1D03               	skipz
  1215     06AD  2EB0               	goto	u375
  1216     06AE  3059               	movlw	89
  1217     06AF  0276               	subwf	motorD@duty,w
  1218     06B0                     u375:
  1219     06B0  1C03               	skipc
  1220     06B1  2EB3               	goto	u371
  1221     06B2  2EB4               	goto	u370
  1222     06B3                     u371:
  1223     06B3  2EB8               	goto	l1055
  1224     06B4                     u370:
  1225     06B4                     l1053:
  1226     06B4  3058               	movlw	88
  1227     06B5  00F6               	movwf	motorD@duty
  1228     06B6  3002               	movlw	2
  1229     06B7  00F7               	movwf	motorD@duty+1
  1230     06B8                     l1055:
  1231                           
  1232                           ;main.c: 226:     duty < -600 ? (duty = 600) : duty;
  1233     06B8  0877               	movf	motorD@duty+1,w
  1234     06B9  3A80               	xorlw	128
  1235     06BA  00F8               	movwf	??_motorD
  1236     06BB  307D               	movlw	125
  1237     06BC  0278               	subwf	??_motorD,w
  1238     06BD  1D03               	skipz
  1239     06BE  2EC1               	goto	u385
  1240     06BF  30A8               	movlw	168
  1241     06C0  0276               	subwf	motorD@duty,w
  1242     06C1                     u385:
  1243     06C1  1803               	skipnc
  1244     06C2  2EC4               	goto	u381
  1245     06C3  2EC5               	goto	u380
  1246     06C4                     u381:
  1247     06C4  2EC9               	goto	l1059
  1248     06C5                     u380:
  1249     06C5                     l1057:
  1250     06C5  3058               	movlw	88
  1251     06C6  00F6               	movwf	motorD@duty
  1252     06C7  3002               	movlw	2
  1253     06C8  00F7               	movwf	motorD@duty+1
  1254     06C9                     l1059:
  1255                           
  1256                           ;main.c: 228:     if(duty > 0){
  1257     06C9  0877               	movf	motorD@duty+1,w
  1258     06CA  3A80               	xorlw	128
  1259     06CB  00F8               	movwf	??_motorD
  1260     06CC  3080               	movlw	128
  1261     06CD  0278               	subwf	??_motorD,w
  1262     06CE  1D03               	skipz
  1263     06CF  2ED2               	goto	u395
  1264     06D0  3001               	movlw	1
  1265     06D1  0276               	subwf	motorD@duty,w
  1266     06D2                     u395:
  1267     06D2  1C03               	skipc
  1268     06D3  2ED5               	goto	u391
  1269     06D4  2ED6               	goto	u390
  1270     06D5                     u391:
  1271     06D5  2EEB               	goto	l168
  1272     06D6                     u390:
  1273     06D6                     l1061:
  1274                           
  1275                           ;main.c: 229:         CCPR1L = (duty << 8) & 0x00FF;
  1276     06D6  0025               	movlb	5	; select bank5
  1277     06D7  0191               	clrf	17	;volatile
  1278     06D8                     l1063:
  1279                           
  1280                           ;main.c: 230:         CCPR1H = (duty >> 2) & 0x00FF;
  1281     06D8  0877               	movf	motorD@duty+1,w
  1282     06D9  00F9               	movwf	??_motorD+1
  1283     06DA  0876               	movf	motorD@duty,w
  1284     06DB  00F8               	movwf	??_motorD
  1285     06DC  0D79               	rlf	??_motorD+1,w
  1286     06DD  0CF9               	rrf	??_motorD+1,f
  1287     06DE  0CF8               	rrf	??_motorD,f
  1288     06DF  0D79               	rlf	??_motorD+1,w
  1289     06E0  0CF9               	rrf	??_motorD+1,f
  1290     06E1  0CF8               	rrf	??_motorD,f
  1291     06E2  0878               	movf	??_motorD,w
  1292     06E3  0092               	movwf	18	;volatile
  1293     06E4                     l1065:
  1294                           
  1295                           ;main.c: 231:         RC3PPS = 0b010101;
  1296     06E4  3015               	movlw	21
  1297     06E5  003D               	movlb	29	; select bank29
  1298     06E6  00A3               	movwf	35	;volatile
  1299                           
  1300                           ;main.c: 232:         RC2PPS = 0x00;
  1301     06E7  01A2               	clrf	34	;volatile
  1302     06E8                     l1067:
  1303                           
  1304                           ;main.c: 233:         LATCbits.LATC2 = 0;
  1305     06E8  0022               	movlb	2	; select bank2
  1306     06E9  110E               	bcf	14,2	;volatile
  1307                           
  1308                           ;main.c: 234:     }
  1309     06EA  2F19               	goto	l172
  1310     06EB                     l168:	
  1311                           ;main.c: 235:     else if(duty < 0){
  1312                           
  1313     06EB  1FF7               	btfss	motorD@duty+1,7
  1314     06EC  2EEE               	goto	u401
  1315     06ED  2EEF               	goto	u400
  1316     06EE                     u401:
  1317     06EE  2F13               	goto	l1081
  1318     06EF                     u400:
  1319     06EF                     l1069:
  1320                           
  1321                           ;main.c: 236:         duty *= -1;
  1322     06EF  30FF               	movlw	255
  1323     06F0  00F0               	movwf	___wmul@multiplier
  1324     06F1  30FF               	movlw	255
  1325     06F2  00F1               	movwf	___wmul@multiplier+1
  1326     06F3  0877               	movf	motorD@duty+1,w
  1327     06F4  00F3               	movwf	___wmul@multiplicand+1
  1328     06F5  0876               	movf	motorD@duty,w
  1329     06F6  00F2               	movwf	___wmul@multiplicand
  1330     06F7  3185  252F  3186   	fcall	___wmul
  1331     06FA  0871               	movf	?___wmul+1,w
  1332     06FB  00F7               	movwf	motorD@duty+1
  1333     06FC  0870               	movf	?___wmul,w
  1334     06FD  00F6               	movwf	motorD@duty
  1335     06FE                     l1071:
  1336                           
  1337                           ;main.c: 237:         CCPR1L = (duty << 8) & 0x00FF;
  1338     06FE  0025               	movlb	5	; select bank5
  1339     06FF  0191               	clrf	17	;volatile
  1340     0700                     l1073:
  1341                           
  1342                           ;main.c: 238:         CCPR1H = (duty >> 2) & 0x00FF;
  1343     0700  0877               	movf	motorD@duty+1,w
  1344     0701  00F9               	movwf	??_motorD+1
  1345     0702  0876               	movf	motorD@duty,w
  1346     0703  00F8               	movwf	??_motorD
  1347     0704  0D79               	rlf	??_motorD+1,w
  1348     0705  0CF9               	rrf	??_motorD+1,f
  1349     0706  0CF8               	rrf	??_motorD,f
  1350     0707  0D79               	rlf	??_motorD+1,w
  1351     0708  0CF9               	rrf	??_motorD+1,f
  1352     0709  0CF8               	rrf	??_motorD,f
  1353     070A  0878               	movf	??_motorD,w
  1354     070B  0092               	movwf	18	;volatile
  1355     070C                     l1075:
  1356                           
  1357                           ;main.c: 239:         RC2PPS = 0b010101;
  1358     070C  3015               	movlw	21
  1359     070D  003D               	movlb	29	; select bank29
  1360     070E  00A2               	movwf	34	;volatile
  1361     070F                     l1077:
  1362                           
  1363                           ;main.c: 240:         RC3PPS = 0x00;
  1364     070F  01A3               	clrf	35	;volatile
  1365     0710                     l1079:
  1366                           
  1367                           ;main.c: 241:         LATCbits.LATC3 = 0;
  1368     0710  0022               	movlb	2	; select bank2
  1369     0711  118E               	bcf	14,3	;volatile
  1370                           
  1371                           ;main.c: 242:     }
  1372     0712  2F19               	goto	l172
  1373     0713                     l1081:
  1374                           
  1375                           ;main.c: 244:         RC2PPS = 0x00;
  1376     0713  003D               	movlb	29	; select bank29
  1377     0714  01A2               	clrf	34	;volatile
  1378                           
  1379                           ;main.c: 245:         RC3PPS = 0x00;
  1380     0715  01A3               	clrf	35	;volatile
  1381     0716                     l1083:
  1382                           
  1383                           ;main.c: 246:         LATCbits.LATC2 = 0;
  1384     0716  0022               	movlb	2	; select bank2
  1385     0717  110E               	bcf	14,2	;volatile
  1386     0718                     l1085:
  1387                           
  1388                           ;main.c: 247:         LATCbits.LATC3 = 0;
  1389     0718  118E               	bcf	14,3	;volatile
  1390     0719                     l172:
  1391     0719  0008               	return
  1392     071A                     __end_of_motorD:
  1393                           
  1394                           	psect	text2
  1395     0634                     __ptext2:	
  1396 ;; *************** function _motorC *****************
  1397 ;; Defined at:
  1398 ;;		line 192 in file "main.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  duty            2    6[COMMON] int 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;		None
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		wreg, status,2, status,0, pclath, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  1412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1415 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1416 ;;Total ram usage:        4 bytes
  1417 ;; Hardware stack levels used: 1
  1418 ;; Hardware stack levels required when called: 1
  1419 ;; This function calls:
  1420 ;;		___wmul
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426     0634                     _motorC:	
  1427                           ;psect for function _motorC
  1428                           
  1429     0634                     l1089:	
  1430                           ;incstack = 0
  1431                           ; Regs used in _motorC: [wreg+status,2+status,0+pclath+cstack]
  1432                           
  1433                           
  1434                           ;main.c: 194:     duty > 600 ? (duty = 600) : duty;
  1435     0634  0877               	movf	motorC@duty+1,w
  1436     0635  3A80               	xorlw	128
  1437     0636  00F8               	movwf	??_motorC
  1438     0637  3082               	movlw	130
  1439     0638  0278               	subwf	??_motorC,w
  1440     0639  1D03               	skipz
  1441     063A  2E3D               	goto	u415
  1442     063B  3059               	movlw	89
  1443     063C  0276               	subwf	motorC@duty,w
  1444     063D                     u415:
  1445     063D  1C03               	skipc
  1446     063E  2E40               	goto	u411
  1447     063F  2E41               	goto	u410
  1448     0640                     u411:
  1449     0640  2E45               	goto	l1093
  1450     0641                     u410:
  1451     0641                     l1091:
  1452     0641  3058               	movlw	88
  1453     0642  00F6               	movwf	motorC@duty
  1454     0643  3002               	movlw	2
  1455     0644  00F7               	movwf	motorC@duty+1
  1456     0645                     l1093:
  1457                           
  1458                           ;main.c: 195:     duty < -600 ? (duty = 600) : duty;
  1459     0645  0877               	movf	motorC@duty+1,w
  1460     0646  3A80               	xorlw	128
  1461     0647  00F8               	movwf	??_motorC
  1462     0648  307D               	movlw	125
  1463     0649  0278               	subwf	??_motorC,w
  1464     064A  1D03               	skipz
  1465     064B  2E4E               	goto	u425
  1466     064C  30A8               	movlw	168
  1467     064D  0276               	subwf	motorC@duty,w
  1468     064E                     u425:
  1469     064E  1803               	skipnc
  1470     064F  2E51               	goto	u421
  1471     0650  2E52               	goto	u420
  1472     0651                     u421:
  1473     0651  2E56               	goto	l1097
  1474     0652                     u420:
  1475     0652                     l1095:
  1476     0652  3058               	movlw	88
  1477     0653  00F6               	movwf	motorC@duty
  1478     0654  3002               	movlw	2
  1479     0655  00F7               	movwf	motorC@duty+1
  1480     0656                     l1097:
  1481                           
  1482                           ;main.c: 197:     if(duty > 0){
  1483     0656  0877               	movf	motorC@duty+1,w
  1484     0657  3A80               	xorlw	128
  1485     0658  00F8               	movwf	??_motorC
  1486     0659  3080               	movlw	128
  1487     065A  0278               	subwf	??_motorC,w
  1488     065B  1D03               	skipz
  1489     065C  2E5F               	goto	u435
  1490     065D  3001               	movlw	1
  1491     065E  0276               	subwf	motorC@duty,w
  1492     065F                     u435:
  1493     065F  1C03               	skipc
  1494     0660  2E62               	goto	u431
  1495     0661  2E63               	goto	u430
  1496     0662                     u431:
  1497     0662  2E78               	goto	l153
  1498     0663                     u430:
  1499     0663                     l1099:
  1500                           
  1501                           ;main.c: 198:         PWM9DCL = (duty << 8) & 0x00FF;
  1502     0663  002C               	movlb	12	; select bank12
  1503     0664  019A               	clrf	26	;volatile
  1504     0665                     l1101:
  1505                           
  1506                           ;main.c: 199:         PWM9DCH = (duty >> 2) & 0x00FF;
  1507     0665  0877               	movf	motorC@duty+1,w
  1508     0666  00F9               	movwf	??_motorC+1
  1509     0667  0876               	movf	motorC@duty,w
  1510     0668  00F8               	movwf	??_motorC
  1511     0669  0D79               	rlf	??_motorC+1,w
  1512     066A  0CF9               	rrf	??_motorC+1,f
  1513     066B  0CF8               	rrf	??_motorC,f
  1514     066C  0D79               	rlf	??_motorC+1,w
  1515     066D  0CF9               	rrf	??_motorC+1,f
  1516     066E  0CF8               	rrf	??_motorC,f
  1517     066F  0878               	movf	??_motorC,w
  1518     0670  009B               	movwf	27	;volatile
  1519     0671                     l1103:
  1520                           
  1521                           ;main.c: 200:         RC1PPS = 0b011011;
  1522     0671  301B               	movlw	27
  1523     0672  003D               	movlb	29	; select bank29
  1524     0673  00A1               	movwf	33	;volatile
  1525                           
  1526                           ;main.c: 201:         RC0PPS = 0x00;
  1527     0674  01A0               	clrf	32	;volatile
  1528     0675                     l1105:
  1529                           
  1530                           ;main.c: 202:         LATCbits.LATC0 = 0;
  1531     0675  0022               	movlb	2	; select bank2
  1532     0676  100E               	bcf	14,0	;volatile
  1533                           
  1534                           ;main.c: 203:     }
  1535     0677  2EA6               	goto	l157
  1536     0678                     l153:	
  1537                           ;main.c: 204:     else if(duty < 0){
  1538                           
  1539     0678  1FF7               	btfss	motorC@duty+1,7
  1540     0679  2E7B               	goto	u441
  1541     067A  2E7C               	goto	u440
  1542     067B                     u441:
  1543     067B  2EA0               	goto	l1119
  1544     067C                     u440:
  1545     067C                     l1107:
  1546                           
  1547                           ;main.c: 205:         duty *= -1;
  1548     067C  30FF               	movlw	255
  1549     067D  00F0               	movwf	___wmul@multiplier
  1550     067E  30FF               	movlw	255
  1551     067F  00F1               	movwf	___wmul@multiplier+1
  1552     0680  0877               	movf	motorC@duty+1,w
  1553     0681  00F3               	movwf	___wmul@multiplicand+1
  1554     0682  0876               	movf	motorC@duty,w
  1555     0683  00F2               	movwf	___wmul@multiplicand
  1556     0684  3185  252F  3186   	fcall	___wmul
  1557     0687  0871               	movf	?___wmul+1,w
  1558     0688  00F7               	movwf	motorC@duty+1
  1559     0689  0870               	movf	?___wmul,w
  1560     068A  00F6               	movwf	motorC@duty
  1561     068B                     l1109:
  1562                           
  1563                           ;main.c: 206:         PWM9DCL = (duty << 8) & 0x00FF;
  1564     068B  002C               	movlb	12	; select bank12
  1565     068C  019A               	clrf	26	;volatile
  1566     068D                     l1111:
  1567                           
  1568                           ;main.c: 207:         PWM9DCH = (duty >> 2) & 0x00FF;
  1569     068D  0877               	movf	motorC@duty+1,w
  1570     068E  00F9               	movwf	??_motorC+1
  1571     068F  0876               	movf	motorC@duty,w
  1572     0690  00F8               	movwf	??_motorC
  1573     0691  0D79               	rlf	??_motorC+1,w
  1574     0692  0CF9               	rrf	??_motorC+1,f
  1575     0693  0CF8               	rrf	??_motorC,f
  1576     0694  0D79               	rlf	??_motorC+1,w
  1577     0695  0CF9               	rrf	??_motorC+1,f
  1578     0696  0CF8               	rrf	??_motorC,f
  1579     0697  0878               	movf	??_motorC,w
  1580     0698  009B               	movwf	27	;volatile
  1581     0699                     l1113:
  1582                           
  1583                           ;main.c: 208:         RC0PPS = 0b011011;
  1584     0699  301B               	movlw	27
  1585     069A  003D               	movlb	29	; select bank29
  1586     069B  00A0               	movwf	32	;volatile
  1587     069C                     l1115:
  1588                           
  1589                           ;main.c: 209:         RC1PPS = 0x00;
  1590     069C  01A1               	clrf	33	;volatile
  1591     069D                     l1117:
  1592                           
  1593                           ;main.c: 210:         LATCbits.LATC1 = 0;
  1594     069D  0022               	movlb	2	; select bank2
  1595     069E  108E               	bcf	14,1	;volatile
  1596                           
  1597                           ;main.c: 211:     }
  1598     069F  2EA6               	goto	l157
  1599     06A0                     l1119:
  1600                           
  1601                           ;main.c: 213:         RC0PPS = 0x00;
  1602     06A0  003D               	movlb	29	; select bank29
  1603     06A1  01A0               	clrf	32	;volatile
  1604                           
  1605                           ;main.c: 214:         RC1PPS = 0x00;
  1606     06A2  01A1               	clrf	33	;volatile
  1607     06A3                     l1121:
  1608                           
  1609                           ;main.c: 215:         LATCbits.LATC0 = 0;
  1610     06A3  0022               	movlb	2	; select bank2
  1611     06A4  100E               	bcf	14,0	;volatile
  1612     06A5                     l1123:
  1613                           
  1614                           ;main.c: 216:         LATCbits.LATC1 = 0;
  1615     06A5  108E               	bcf	14,1	;volatile
  1616     06A6                     l157:
  1617     06A6  0008               	return
  1618     06A7                     __end_of_motorC:
  1619                           
  1620                           	psect	text3
  1621     05C1                     __ptext3:	
  1622 ;; *************** function _motorB *****************
  1623 ;; Defined at:
  1624 ;;		line 161 in file "main.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;  duty            2    6[COMMON] int 
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;		None
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      void 
  1631 ;; Registers used:
  1632 ;;		wreg, status,2, status,0, pclath, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  1638 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1640 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1641 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1642 ;;Total ram usage:        4 bytes
  1643 ;; Hardware stack levels used: 1
  1644 ;; Hardware stack levels required when called: 1
  1645 ;; This function calls:
  1646 ;;		___wmul
  1647 ;; This function is called by:
  1648 ;;		_main
  1649 ;; This function uses a non-reentrant model
  1650 ;;
  1651                           
  1652     05C1                     _motorB:	
  1653                           ;psect for function _motorB
  1654                           
  1655     05C1                     l1009:	
  1656                           ;incstack = 0
  1657                           ; Regs used in _motorB: [wreg+status,2+status,0+pclath+cstack]
  1658                           
  1659                           
  1660                           ;main.c: 163:     duty > 600 ? (duty = 600) : duty;
  1661     05C1  0877               	movf	motorB@duty+1,w
  1662     05C2  3A80               	xorlw	128
  1663     05C3  00F8               	movwf	??_motorB
  1664     05C4  3082               	movlw	130
  1665     05C5  0278               	subwf	??_motorB,w
  1666     05C6  1D03               	skipz
  1667     05C7  2DCA               	goto	u335
  1668     05C8  3059               	movlw	89
  1669     05C9  0276               	subwf	motorB@duty,w
  1670     05CA                     u335:
  1671     05CA  1C03               	skipc
  1672     05CB  2DCD               	goto	u331
  1673     05CC  2DCE               	goto	u330
  1674     05CD                     u331:
  1675     05CD  2DD2               	goto	l1013
  1676     05CE                     u330:
  1677     05CE                     l1011:
  1678     05CE  3058               	movlw	88
  1679     05CF  00F6               	movwf	motorB@duty
  1680     05D0  3002               	movlw	2
  1681     05D1  00F7               	movwf	motorB@duty+1
  1682     05D2                     l1013:
  1683                           
  1684                           ;main.c: 164:     duty < -600 ? (duty = 600) : duty;
  1685     05D2  0877               	movf	motorB@duty+1,w
  1686     05D3  3A80               	xorlw	128
  1687     05D4  00F8               	movwf	??_motorB
  1688     05D5  307D               	movlw	125
  1689     05D6  0278               	subwf	??_motorB,w
  1690     05D7  1D03               	skipz
  1691     05D8  2DDB               	goto	u345
  1692     05D9  30A8               	movlw	168
  1693     05DA  0276               	subwf	motorB@duty,w
  1694     05DB                     u345:
  1695     05DB  1803               	skipnc
  1696     05DC  2DDE               	goto	u341
  1697     05DD  2DDF               	goto	u340
  1698     05DE                     u341:
  1699     05DE  2DE3               	goto	l1017
  1700     05DF                     u340:
  1701     05DF                     l1015:
  1702     05DF  3058               	movlw	88
  1703     05E0  00F6               	movwf	motorB@duty
  1704     05E1  3002               	movlw	2
  1705     05E2  00F7               	movwf	motorB@duty+1
  1706     05E3                     l1017:
  1707                           
  1708                           ;main.c: 166:     if(duty > 0){
  1709     05E3  0877               	movf	motorB@duty+1,w
  1710     05E4  3A80               	xorlw	128
  1711     05E5  00F8               	movwf	??_motorB
  1712     05E6  3080               	movlw	128
  1713     05E7  0278               	subwf	??_motorB,w
  1714     05E8  1D03               	skipz
  1715     05E9  2DEC               	goto	u355
  1716     05EA  3001               	movlw	1
  1717     05EB  0276               	subwf	motorB@duty,w
  1718     05EC                     u355:
  1719     05EC  1C03               	skipc
  1720     05ED  2DEF               	goto	u351
  1721     05EE  2DF0               	goto	u350
  1722     05EF                     u351:
  1723     05EF  2E05               	goto	l138
  1724     05F0                     u350:
  1725     05F0                     l1019:
  1726                           
  1727                           ;main.c: 167:         PWM4DCL = (duty << 8) & 0x00FF;
  1728     05F0  002C               	movlb	12	; select bank12
  1729     05F1  0197               	clrf	23	;volatile
  1730     05F2                     l1021:
  1731                           
  1732                           ;main.c: 168:         PWM4DCH = (duty >> 2) & 0x00FF;
  1733     05F2  0877               	movf	motorB@duty+1,w
  1734     05F3  00F9               	movwf	??_motorB+1
  1735     05F4  0876               	movf	motorB@duty,w
  1736     05F5  00F8               	movwf	??_motorB
  1737     05F6  0D79               	rlf	??_motorB+1,w
  1738     05F7  0CF9               	rrf	??_motorB+1,f
  1739     05F8  0CF8               	rrf	??_motorB,f
  1740     05F9  0D79               	rlf	??_motorB+1,w
  1741     05FA  0CF9               	rrf	??_motorB+1,f
  1742     05FB  0CF8               	rrf	??_motorB,f
  1743     05FC  0878               	movf	??_motorB,w
  1744     05FD  0098               	movwf	24	;volatile
  1745     05FE                     l1023:
  1746                           
  1747                           ;main.c: 169:         RA7PPS = 0b011010;
  1748     05FE  301A               	movlw	26
  1749     05FF  003D               	movlb	29	; select bank29
  1750     0600  0097               	movwf	23	;volatile
  1751                           
  1752                           ;main.c: 170:         RA6PPS = 0x00;
  1753     0601  0196               	clrf	22	;volatile
  1754     0602                     l1025:
  1755                           
  1756                           ;main.c: 171:         LATAbits.LATA6 = 0;
  1757     0602  0022               	movlb	2	; select bank2
  1758     0603  130C               	bcf	12,6	;volatile
  1759                           
  1760                           ;main.c: 172:     }
  1761     0604  2E33               	goto	l142
  1762     0605                     l138:	
  1763                           ;main.c: 173:     else if(duty < 0){
  1764                           
  1765     0605  1FF7               	btfss	motorB@duty+1,7
  1766     0606  2E08               	goto	u361
  1767     0607  2E09               	goto	u360
  1768     0608                     u361:
  1769     0608  2E2D               	goto	l1039
  1770     0609                     u360:
  1771     0609                     l1027:
  1772                           
  1773                           ;main.c: 174:         duty *= -1;
  1774     0609  30FF               	movlw	255
  1775     060A  00F0               	movwf	___wmul@multiplier
  1776     060B  30FF               	movlw	255
  1777     060C  00F1               	movwf	___wmul@multiplier+1
  1778     060D  0877               	movf	motorB@duty+1,w
  1779     060E  00F3               	movwf	___wmul@multiplicand+1
  1780     060F  0876               	movf	motorB@duty,w
  1781     0610  00F2               	movwf	___wmul@multiplicand
  1782     0611  3185  252F  3185   	fcall	___wmul
  1783     0614  0871               	movf	?___wmul+1,w
  1784     0615  00F7               	movwf	motorB@duty+1
  1785     0616  0870               	movf	?___wmul,w
  1786     0617  00F6               	movwf	motorB@duty
  1787     0618                     l1029:
  1788                           
  1789                           ;main.c: 175:         PWM4DCL = (duty << 8) & 0x00FF;
  1790     0618  002C               	movlb	12	; select bank12
  1791     0619  0197               	clrf	23	;volatile
  1792     061A                     l1031:
  1793                           
  1794                           ;main.c: 176:         PWM4DCH = (duty >> 2) & 0x00FF;
  1795     061A  0877               	movf	motorB@duty+1,w
  1796     061B  00F9               	movwf	??_motorB+1
  1797     061C  0876               	movf	motorB@duty,w
  1798     061D  00F8               	movwf	??_motorB
  1799     061E  0D79               	rlf	??_motorB+1,w
  1800     061F  0CF9               	rrf	??_motorB+1,f
  1801     0620  0CF8               	rrf	??_motorB,f
  1802     0621  0D79               	rlf	??_motorB+1,w
  1803     0622  0CF9               	rrf	??_motorB+1,f
  1804     0623  0CF8               	rrf	??_motorB,f
  1805     0624  0878               	movf	??_motorB,w
  1806     0625  0098               	movwf	24	;volatile
  1807     0626                     l1033:
  1808                           
  1809                           ;main.c: 177:         RA6PPS = 0b011010;
  1810     0626  301A               	movlw	26
  1811     0627  003D               	movlb	29	; select bank29
  1812     0628  0096               	movwf	22	;volatile
  1813     0629                     l1035:
  1814                           
  1815                           ;main.c: 178:         RA7PPS = 0x00;
  1816     0629  0197               	clrf	23	;volatile
  1817     062A                     l1037:
  1818                           
  1819                           ;main.c: 179:         LATAbits.LATA7 = 0;
  1820     062A  0022               	movlb	2	; select bank2
  1821     062B  138C               	bcf	12,7	;volatile
  1822                           
  1823                           ;main.c: 180:     }
  1824     062C  2E33               	goto	l142
  1825     062D                     l1039:
  1826                           
  1827                           ;main.c: 182:         RA6PPS = 0x00;
  1828     062D  003D               	movlb	29	; select bank29
  1829     062E  0196               	clrf	22	;volatile
  1830                           
  1831                           ;main.c: 183:         RA7PPS = 0x00;
  1832     062F  0197               	clrf	23	;volatile
  1833     0630                     l1041:
  1834                           
  1835                           ;main.c: 184:         LATAbits.LATA6 = 0;
  1836     0630  0022               	movlb	2	; select bank2
  1837     0631  130C               	bcf	12,6	;volatile
  1838     0632                     l1043:
  1839                           
  1840                           ;main.c: 185:         LATAbits.LATA7 = 0;
  1841     0632  138C               	bcf	12,7	;volatile
  1842     0633                     l142:
  1843     0633  0008               	return
  1844     0634                     __end_of_motorB:
  1845                           
  1846                           	psect	text4
  1847     054E                     __ptext4:	
  1848 ;; *************** function _motorA *****************
  1849 ;; Defined at:
  1850 ;;		line 130 in file "main.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  duty            2    6[COMMON] int 
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;		None
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, status,2, status,0, pclath, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  1864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1866 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1867 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  1868 ;;Total ram usage:        4 bytes
  1869 ;; Hardware stack levels used: 1
  1870 ;; Hardware stack levels required when called: 1
  1871 ;; This function calls:
  1872 ;;		___wmul
  1873 ;; This function is called by:
  1874 ;;		_main
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878     054E                     _motorA:	
  1879                           ;psect for function _motorA
  1880                           
  1881     054E                     l971:	
  1882                           ;incstack = 0
  1883                           ; Regs used in _motorA: [wreg+status,2+status,0+pclath+cstack]
  1884                           
  1885                           
  1886                           ;main.c: 132:     duty > 600 ? (duty = 600) : duty;
  1887     054E  0877               	movf	motorA@duty+1,w
  1888     054F  3A80               	xorlw	128
  1889     0550  00F8               	movwf	??_motorA
  1890     0551  3082               	movlw	130
  1891     0552  0278               	subwf	??_motorA,w
  1892     0553  1D03               	skipz
  1893     0554  2D57               	goto	u295
  1894     0555  3059               	movlw	89
  1895     0556  0276               	subwf	motorA@duty,w
  1896     0557                     u295:
  1897     0557  1C03               	skipc
  1898     0558  2D5A               	goto	u291
  1899     0559  2D5B               	goto	u290
  1900     055A                     u291:
  1901     055A  2D5F               	goto	l975
  1902     055B                     u290:
  1903     055B                     l973:
  1904     055B  3058               	movlw	88
  1905     055C  00F6               	movwf	motorA@duty
  1906     055D  3002               	movlw	2
  1907     055E  00F7               	movwf	motorA@duty+1
  1908     055F                     l975:
  1909                           
  1910                           ;main.c: 133:     duty < -600 ? (duty = 600) : duty;
  1911     055F  0877               	movf	motorA@duty+1,w
  1912     0560  3A80               	xorlw	128
  1913     0561  00F8               	movwf	??_motorA
  1914     0562  307D               	movlw	125
  1915     0563  0278               	subwf	??_motorA,w
  1916     0564  1D03               	skipz
  1917     0565  2D68               	goto	u305
  1918     0566  30A8               	movlw	168
  1919     0567  0276               	subwf	motorA@duty,w
  1920     0568                     u305:
  1921     0568  1803               	skipnc
  1922     0569  2D6B               	goto	u301
  1923     056A  2D6C               	goto	u300
  1924     056B                     u301:
  1925     056B  2D70               	goto	l979
  1926     056C                     u300:
  1927     056C                     l977:
  1928     056C  3058               	movlw	88
  1929     056D  00F6               	movwf	motorA@duty
  1930     056E  3002               	movlw	2
  1931     056F  00F7               	movwf	motorA@duty+1
  1932     0570                     l979:
  1933                           
  1934                           ;main.c: 135:     if(duty > 0){
  1935     0570  0877               	movf	motorA@duty+1,w
  1936     0571  3A80               	xorlw	128
  1937     0572  00F8               	movwf	??_motorA
  1938     0573  3080               	movlw	128
  1939     0574  0278               	subwf	??_motorA,w
  1940     0575  1D03               	skipz
  1941     0576  2D79               	goto	u315
  1942     0577  3001               	movlw	1
  1943     0578  0276               	subwf	motorA@duty,w
  1944     0579                     u315:
  1945     0579  1C03               	skipc
  1946     057A  2D7C               	goto	u311
  1947     057B  2D7D               	goto	u310
  1948     057C                     u311:
  1949     057C  2D92               	goto	l123
  1950     057D                     u310:
  1951     057D                     l981:
  1952                           
  1953                           ;main.c: 136:         PWM3DCL = (duty << 8) & 0x00FF;
  1954     057D  002C               	movlb	12	; select bank12
  1955     057E  0194               	clrf	20	;volatile
  1956     057F                     l983:
  1957                           
  1958                           ;main.c: 137:         PWM3DCH = (duty >> 2) & 0x00FF;
  1959     057F  0877               	movf	motorA@duty+1,w
  1960     0580  00F9               	movwf	??_motorA+1
  1961     0581  0876               	movf	motorA@duty,w
  1962     0582  00F8               	movwf	??_motorA
  1963     0583  0D79               	rlf	??_motorA+1,w
  1964     0584  0CF9               	rrf	??_motorA+1,f
  1965     0585  0CF8               	rrf	??_motorA,f
  1966     0586  0D79               	rlf	??_motorA+1,w
  1967     0587  0CF9               	rrf	??_motorA+1,f
  1968     0588  0CF8               	rrf	??_motorA,f
  1969     0589  0878               	movf	??_motorA,w
  1970     058A  0095               	movwf	21	;volatile
  1971     058B                     l985:
  1972                           
  1973                           ;main.c: 138:         RA5PPS = 0b011001;
  1974     058B  3019               	movlw	25
  1975     058C  003D               	movlb	29	; select bank29
  1976     058D  0095               	movwf	21	;volatile
  1977                           
  1978                           ;main.c: 139:         RA4PPS = 0x00;
  1979     058E  0194               	clrf	20	;volatile
  1980     058F                     l987:
  1981                           
  1982                           ;main.c: 140:         LATAbits.LATA4 = 0;
  1983     058F  0022               	movlb	2	; select bank2
  1984     0590  120C               	bcf	12,4	;volatile
  1985                           
  1986                           ;main.c: 141:     }
  1987     0591  2DC0               	goto	l127
  1988     0592                     l123:	
  1989                           ;main.c: 142:     else if(duty < 0){
  1990                           
  1991     0592  1FF7               	btfss	motorA@duty+1,7
  1992     0593  2D95               	goto	u321
  1993     0594  2D96               	goto	u320
  1994     0595                     u321:
  1995     0595  2DBA               	goto	l1001
  1996     0596                     u320:
  1997     0596                     l989:
  1998                           
  1999                           ;main.c: 143:         duty *= -1;
  2000     0596  30FF               	movlw	255
  2001     0597  00F0               	movwf	___wmul@multiplier
  2002     0598  30FF               	movlw	255
  2003     0599  00F1               	movwf	___wmul@multiplier+1
  2004     059A  0877               	movf	motorA@duty+1,w
  2005     059B  00F3               	movwf	___wmul@multiplicand+1
  2006     059C  0876               	movf	motorA@duty,w
  2007     059D  00F2               	movwf	___wmul@multiplicand
  2008     059E  3185  252F  3185   	fcall	___wmul
  2009     05A1  0871               	movf	?___wmul+1,w
  2010     05A2  00F7               	movwf	motorA@duty+1
  2011     05A3  0870               	movf	?___wmul,w
  2012     05A4  00F6               	movwf	motorA@duty
  2013     05A5                     l991:
  2014                           
  2015                           ;main.c: 144:         PWM3DCL = (duty << 8) & 0x00FF;
  2016     05A5  002C               	movlb	12	; select bank12
  2017     05A6  0194               	clrf	20	;volatile
  2018     05A7                     l993:
  2019                           
  2020                           ;main.c: 145:         PWM3DCH = (duty >> 2) & 0x00FF;
  2021     05A7  0877               	movf	motorA@duty+1,w
  2022     05A8  00F9               	movwf	??_motorA+1
  2023     05A9  0876               	movf	motorA@duty,w
  2024     05AA  00F8               	movwf	??_motorA
  2025     05AB  0D79               	rlf	??_motorA+1,w
  2026     05AC  0CF9               	rrf	??_motorA+1,f
  2027     05AD  0CF8               	rrf	??_motorA,f
  2028     05AE  0D79               	rlf	??_motorA+1,w
  2029     05AF  0CF9               	rrf	??_motorA+1,f
  2030     05B0  0CF8               	rrf	??_motorA,f
  2031     05B1  0878               	movf	??_motorA,w
  2032     05B2  0095               	movwf	21	;volatile
  2033     05B3                     l995:
  2034                           
  2035                           ;main.c: 146:         RA4PPS = 0b011001;
  2036     05B3  3019               	movlw	25
  2037     05B4  003D               	movlb	29	; select bank29
  2038     05B5  0094               	movwf	20	;volatile
  2039     05B6                     l997:
  2040                           
  2041                           ;main.c: 147:         RA5PPS = 0x00;
  2042     05B6  0195               	clrf	21	;volatile
  2043     05B7                     l999:
  2044                           
  2045                           ;main.c: 148:         LATAbits.LATA5 = 0;
  2046     05B7  0022               	movlb	2	; select bank2
  2047     05B8  128C               	bcf	12,5	;volatile
  2048                           
  2049                           ;main.c: 149:     }
  2050     05B9  2DC0               	goto	l127
  2051     05BA                     l1001:
  2052                           
  2053                           ;main.c: 151:         RA4PPS = 0x00;
  2054     05BA  003D               	movlb	29	; select bank29
  2055     05BB  0194               	clrf	20	;volatile
  2056                           
  2057                           ;main.c: 152:         RA5PPS = 0x00;
  2058     05BC  0195               	clrf	21	;volatile
  2059     05BD                     l1003:
  2060                           
  2061                           ;main.c: 153:         LATAbits.LATA4 = 0;
  2062     05BD  0022               	movlb	2	; select bank2
  2063     05BE  120C               	bcf	12,4	;volatile
  2064     05BF                     l1005:
  2065                           
  2066                           ;main.c: 154:         LATAbits.LATA5 = 0;
  2067     05BF  128C               	bcf	12,5	;volatile
  2068     05C0                     l127:
  2069     05C0  0008               	return
  2070     05C1                     __end_of_motorA:
  2071                           
  2072                           	psect	text5
  2073     052F                     __ptext5:	
  2074 ;; *************** function ___wmul *****************
  2075 ;; Defined at:
  2076 ;;		line 15 in file "D:\Program Files\Microchip\xc8\v2.40\pic\sources\c99\common\Umul16.c"
  2077 ;; Parameters:    Size  Location     Type
  2078 ;;  multiplier      2    0[COMMON] unsigned int 
  2079 ;;  multiplicand    2    2[COMMON] unsigned int 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  product         2    4[COMMON] unsigned int 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  2    0[COMMON] unsigned int 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, status,0
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2091 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2094 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2095 ;;Total ram usage:        6 bytes
  2096 ;; Hardware stack levels used: 1
  2097 ;; This function calls:
  2098 ;;		Nothing
  2099 ;; This function is called by:
  2100 ;;		_motorA
  2101 ;;		_motorB
  2102 ;;		_motorC
  2103 ;;		_motorD
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107     052F                     ___wmul:	
  2108                           ;psect for function ___wmul
  2109                           
  2110     052F                     l957:	
  2111                           ;incstack = 0
  2112                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2113                           
  2114     052F  01F4               	clrf	___wmul@product
  2115     0530  01F5               	clrf	___wmul@product+1
  2116     0531                     l959:
  2117     0531  1C70               	btfss	___wmul@multiplier,0
  2118     0532  2D34               	goto	u251
  2119     0533  2D35               	goto	u250
  2120     0534                     u251:
  2121     0534  2D39               	goto	l243
  2122     0535                     u250:
  2123     0535                     l961:
  2124     0535  0872               	movf	___wmul@multiplicand,w
  2125     0536  07F4               	addwf	___wmul@product,f
  2126     0537  0873               	movf	___wmul@multiplicand+1,w
  2127     0538  3DF5               	addwfc	___wmul@product+1,f
  2128     0539                     l243:
  2129     0539  3001               	movlw	1
  2130     053A                     u265:
  2131     053A  35F2               	lslf	___wmul@multiplicand,f
  2132     053B  0DF3               	rlf	___wmul@multiplicand+1,f
  2133     053C  0B89               	decfsz	9,f
  2134     053D  2D3A               	goto	u265
  2135     053E                     l963:
  2136     053E  3001               	movlw	1
  2137     053F                     u275:
  2138     053F  36F1               	lsrf	___wmul@multiplier+1,f
  2139     0540  0CF0               	rrf	___wmul@multiplier,f
  2140     0541  0B89               	decfsz	9,f
  2141     0542  2D3F               	goto	u275
  2142     0543                     l965:
  2143     0543  0870               	movf	___wmul@multiplier,w
  2144     0544  0471               	iorwf	___wmul@multiplier+1,w
  2145     0545  1D03               	btfss	3,2
  2146     0546  2D48               	goto	u281
  2147     0547  2D49               	goto	u280
  2148     0548                     u281:
  2149     0548  2D31               	goto	l959
  2150     0549                     u280:
  2151     0549                     l967:
  2152     0549  0875               	movf	___wmul@product+1,w
  2153     054A  00F1               	movwf	?___wmul+1
  2154     054B  0874               	movf	___wmul@product,w
  2155     054C  00F0               	movwf	?___wmul
  2156     054D                     l245:
  2157     054D  0008               	return
  2158     054E                     __end_of___wmul:
  2159                           
  2160                           	psect	text6
  2161     0522                     __ptext6:	
  2162 ;; *************** function _PushSwitchRead *****************
  2163 ;; Defined at:
  2164 ;;		line 254 in file "main.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;		None
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;		None
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  2    0[COMMON] unsigned int 
  2171 ;; Registers used:
  2172 ;;		wreg, status,2, status,0
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2180 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2181 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2182 ;;Total ram usage:        5 bytes
  2183 ;; Hardware stack levels used: 1
  2184 ;; This function calls:
  2185 ;;		Nothing
  2186 ;; This function is called by:
  2187 ;;		_main
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191     0522                     _PushSwitchRead:	
  2192                           ;psect for function _PushSwitchRead
  2193                           
  2194     0522                     l1047:	
  2195                           ;incstack = 0
  2196                           ; Regs used in _PushSwitchRead: [wreg+status,2+status,0]
  2197                           
  2198                           
  2199                           ;main.c: 255:     return PORTAbits.RA3;
  2200     0522  0020               	movlb	0	; select bank0
  2201     0523  0C0C               	rrf	12,w	;volatile
  2202     0524  00F2               	movwf	??_PushSwitchRead
  2203     0525  0CF2               	rrf	??_PushSwitchRead,f
  2204     0526  0C72               	rrf	??_PushSwitchRead,w
  2205     0527  3901               	andlw	1
  2206     0528  00F3               	movwf	??_PushSwitchRead+1
  2207     0529  01F4               	clrf	??_PushSwitchRead+2
  2208     052A  0873               	movf	??_PushSwitchRead+1,w
  2209     052B  00F0               	movwf	?_PushSwitchRead
  2210     052C  0874               	movf	??_PushSwitchRead+2,w
  2211     052D  00F1               	movwf	?_PushSwitchRead+1
  2212     052E                     l175:
  2213     052E  0008               	return
  2214     052F                     __end_of_PushSwitchRead:
  2215     007E                     btemp	set	126	;btemp
  2216     007E                     wtemp0	set	126
  2217                           
  2218                           	psect	idloc
  2219                           
  2220                           ;Config register IDLOC0 @ 0x8000
  2221                           ;	unspecified, using default values
  2222     8000                     	org	32768
  2223     8000  3FFF               	dw	16383
  2224                           
  2225                           ;Config register IDLOC1 @ 0x8001
  2226                           ;	unspecified, using default values
  2227     8001                     	org	32769
  2228     8001  3FFF               	dw	16383
  2229                           
  2230                           ;Config register IDLOC2 @ 0x8002
  2231                           ;	unspecified, using default values
  2232     8002                     	org	32770
  2233     8002  3FFF               	dw	16383
  2234                           
  2235                           ;Config register IDLOC3 @ 0x8003
  2236                           ;	unspecified, using default values
  2237     8003                     	org	32771
  2238     8003  3FFF               	dw	16383
  2239                           
  2240                           	psect	config
  2241                           
  2242                           ;Config register CONFIG1 @ 0x8007
  2243                           ;	Oscillator Selection Bits
  2244                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  2245                           ;	Watchdog Timer Enable
  2246                           ;	WDTE = OFF, WDT disabled
  2247                           ;	Power-up Timer Enable
  2248                           ;	PWRTE = ON, PWRT enabled
  2249                           ;	MCLR Pin Function Select
  2250                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  2251                           ;	Flash Program Memory Code Protection
  2252                           ;	CP = OFF, Program memory code protection is disabled
  2253                           ;	Brown-out Reset Enable
  2254                           ;	BOREN = ON, Brown-out Reset enabled
  2255                           ;	Clock Out Enable
  2256                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  2257                           ;	Internal/External Switchover Mode
  2258                           ;	IESO = OFF, Internal/External Switchover Mode is disabled
  2259                           ;	Fail-Safe Clock Monitor Enable
  2260                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2261     8007                     	org	32775
  2262     8007  0FC4               	dw	4036
  2263                           
  2264                           ;Config register CONFIG2 @ 0x8008
  2265                           ;	Flash Memory Self-Write Protection
  2266                           ;	WRT = OFF, Write protection off
  2267                           ;	Peripheral Pin Select one-way control
  2268                           ;	PPS1WAY = ON, The PPSLOCK bit cannot be cleared once it is set by software
  2269                           ;	Zero-cross detect disable
  2270                           ;	ZCD = OFF, Zero-cross detect circuit is disabled at POR
  2271                           ;	Phase Lock Loop enable
  2272                           ;	PLLEN = ON, 4x PLL is always enabled
  2273                           ;	Stack Overflow/Underflow Reset Enable
  2274                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  2275                           ;	Brown-out Reset Voltage Selection
  2276                           ;	BORV = HI, Brown-out Reset Voltage (Vbor), high trip point selected.
  2277                           ;	Low-Power Brown Out Reset
  2278                           ;	LPBOR = OFF, Low-Power BOR is disabled
  2279                           ;	Low-Voltage Programming Enable
  2280                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  2281     8008                     	org	32776
  2282     8008  1BFF               	dw	7167

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      4       4
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           80      0       0
    BANK24           80      0       0
    BANK25           32      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_motorA
    _main->_motorB
    _main->_motorC
    _main->_motorD
    _motorD->___wmul
    _motorC->___wmul
    _motorB->___wmul
    _motorA->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    4304
                                             10 COMMON     1     1      0
                                              0 BANK0      4     4      0
                     _PushSwitchRead
                             _motorA
                             _motorB
                             _motorC
                             _motorD
 ---------------------------------------------------------------------------------
 (1) _motorD                                               4     2      2    1009
                                              6 COMMON     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _motorC                                               4     2      2    1009
                                              6 COMMON     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _motorB                                               4     2      2    1009
                                              6 COMMON     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _motorA                                               4     2      2    1009
                                              6 COMMON     4     2      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     700
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _PushSwitchRead                                       5     3      2       0
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PushSwitchRead
   _motorA
     ___wmul
   _motorB
     ___wmul
   _motorC
     ___wmul
   _motorD
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM_1           3E0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BIGRAM             3F0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITCOMMON            E      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
COMMON               E      B       B       3       78.6%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
STACK                0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK0            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
ABS                  0      0       0      13        0.0%
BITBANK4            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK5            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK6            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITBANK7            50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BANK7               50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITBANK8            50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8               50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITBANK9            50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9               50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITBANK10           50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10              50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITBANK11           50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
DATA                 0      0       0      30        0.0%
BITBANK12           30      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12              30      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK13           50      0       0      33        0.0%
BANK13              50      0       0      34        0.0%
BITBANK14           50      0       0      35        0.0%
BANK14              50      0       0      36        0.0%
BITBANK15           50      0       0      37        0.0%
BANK15              50      0       0      38        0.0%
BITBANK16           50      0       0      39        0.0%
BANK16              50      0       0      40        0.0%
BITBANK17           50      0       0      41        0.0%
BANK17              50      0       0      42        0.0%
BITBANK18           50      0       0      43        0.0%
BANK18              50      0       0      44        0.0%
BITBANK19           50      0       0      45        0.0%
BANK19              50      0       0      46        0.0%
BITBANK20           50      0       0      47        0.0%
BANK20              50      0       0      48        0.0%
BITBANK21           50      0       0      49        0.0%
BANK21              50      0       0      50        0.0%
BITBANK22           50      0       0      51        0.0%
BANK22              50      0       0      52        0.0%
BITBANK23           50      0       0      53        0.0%
BANK23              50      0       0      54        0.0%
BITBANK24           50      0       0      55        0.0%
BANK24              50      0       0      56        0.0%
BITBANK25           20      0       0      57        0.0%
BANK25              20      0       0      58        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Aug 15 15:11:48 2023

    ___wmul@multiplicand 0072                      l123 0592                      l142 0633  
                    l127 05C0                      l153 0678                      l138 0605  
                    l243 0539                      l172 0719                      l245 054D  
                    l157 06A6                      l175 052E                      l168 06EB  
                    l961 0535                      l963 053E                      l971 054E  
                    l965 0543                      l957 052F                      l981 057D  
                    l973 055B                      l967 0549                      l959 0531  
                    l991 05A5                      l983 057F                      l975 055F  
                    l993 05A7                      l985 058B                      l977 056C  
                    l995 05B3                      l987 058F                      l979 0570  
                    l997 05B6                      l989 0596                      l999 05B7  
                    u300 056C                      u301 056B                      u310 057D  
                    u311 057C                      u320 0596                      u400 06EF  
                    u321 0595                      u305 0568                      u401 06EE  
                    u250 0535                      u330 05CE                      u410 0641  
                    u251 0534                      u315 0579                      u331 05CD  
                    u411 0640                      u340 05DF                      u420 0652  
                    u341 05DE                      u421 0651                      u350 05F0  
                    u430 0663                      u351 05EF                      u335 05CA  
                    u431 0662                      u415 063D                      u280 0549  
                    u360 0609                      u440 067C                      u281 0548  
                    u265 053A                      u361 0608                      u345 05DB  
                    u441 067B                      u425 064E                      u290 055B  
                    u370 06B4                      u450 0788                      u275 053F  
                    u291 055A                      u355 05EC                      u435 065F  
                    u371 06B3                      u507 07E3                      u451 0787  
                    u380 06C5                      u460 07B2                      u381 06C4  
                    u461 07B1                      u390 06D6                      u470 07D0  
                    u295 0557                      u391 06D5                      u375 06B0  
                    u471 07CF                      u480 07FA                      u385 06C1  
                    u481 07F9                      u465 07AE                      u395 06D2  
                    u485 07F6                      u497 079B                      wreg 0009  
                   l1001 05BA                     l1003 05BD                     l1011 05CE  
                   l1005 05BF                     l1021 05F2                     l1013 05D2  
                   l1101 0665                     l1031 061A                     l1023 05FE  
                   l1015 05DF                     l1111 068D                     l1103 0671  
                   l1041 0630                     l1033 0626                     l1025 0602  
                   l1017 05E3                     l1009 05C1                     l1121 06A3  
                   l1113 0699                     l1105 0675                     l1201 0798  
                   l1043 0632                     l1035 0629                     l1027 0609  
                   l1019 05F0                     l1123 06A5                     l1115 069C  
                   l1107 067C                     l1051 06A7                     l1211 07E0  
                   l1203 07B2                     l1131 071F                     l1037 062A  
                   l1029 0618                     l1117 069D                     l1109 068B  
                   l1061 06D6                     l1053 06B4                     l1141 0731  
                   l1133 0722                     l1047 0522                     l1039 062D  
                   l1119 06A0                     l1071 06FE                     l1063 06D8  
                   l1055 06B8                     l1207 07B7                     l1151 073C  
                   l1143 0732                     l1135 0725                     l1127 071A  
                   l1073 0700                     l1081 0713                     l1065 06E4  
                   l1057 06C5                     l1209 07D0                     l1161 0748  
                   l1153 073F                     l1145 0733                     l1137 072C  
                   l1129 071D                     l1091 0641                     l1083 0716  
                   l1075 070C                     l1067 06E8                     l1059 06C9  
                   l1171 0754                     l1163 074B                     l1155 0742  
                   l1147 0738                     l1139 072E                     l1093 0645  
                   l1085 0718                     l1077 070F                     l1069 06EF  
                   l1181 0760                     l1173 0757                     l1165 074E  
                   l1157 0745                     l1149 073A                     l1095 0652  
                   l1079 0710                     l1191 076A                     l1183 0763  
                   l1175 075A                     l1167 0751                     l1159 0747  
                   l1097 0656                     l1089 0634                     l1185 0766  
                   l1177 075D                     l1169 0753                     l1099 0663  
                   l1187 0768                     l1179 075F                     l1197 076F  
                   l1189 0769                     l1199 0788                     _LATA 010C  
                   _LATB 010D                     _LATC 010E                     _T2PR 0494  
                   _WPUA 020C                     _WPUB 020D                     _WPUC 020E  
                   _main 071A                     btemp 007E                     start 0002  
                  ?_main 0070                    _T2CON 0495                    _TRISA 008C  
                  _TRISB 008D                    _TRISC 008E                    main@i 0020  
                  status 0003                    wtemp0 007E          __initialization 07FD  
           __end_of_main 07FD                   ??_main 007A         ??_PushSwitchRead 0072  
                 _CCPR1H 0292                   _CCPR1L 0291                   _ANSELA 018C  
                 _ANSELB 018D                   _ANSELC 018E                   _RA4PPS 0E94  
                 _RC0PPS 0EA0                   _RA5PPS 0E95                   _RC1PPS 0EA1  
                 _RA6PPS 0E96                   _RC2PPS 0EA2                   _RA7PPS 0E97  
                 _RC3PPS 0EA3                   _OSCCON 009B             _CCPTMRS1bits 029E  
           _CCPTMRS2bits 029F                   ___wmul 052F                   _motorA 054E  
                 _motorB 05C1                   _motorC 0634                   _motorD 06A7  
__end_of__initialization 07FD           __pcstackCOMMON 0070           _OPTION_REGbits 0097  
           _T2CLKCONbits 0497               __pmaintext 071A                  ?___wmul 0070  
                _CCP1CON 0293                  ?_motorA 0076                  ?_motorB 0076  
                ?_motorC 0076                  ?_motorD 0076                  _PWM3DCH 0615  
                _PWM3DCL 0614                  _PWM4DCH 0618                  _PWM4DCL 0617  
                _PWM3CON 0616                  _PWM4CON 0619                  _PWM9DCH 061B  
                _PWM9DCL 061A                  _PWM9CON 061C                  __ptext1 06A7  
                __ptext2 0634                  __ptext3 05C1                  __ptext4 054E  
                __ptext5 052F                  __ptext6 0522     end_of_initialization 07FD  
              _PORTAbits 000C           __end_of___wmul 054E           __end_of_motorA 05C1  
         __end_of_motorB 0634           __end_of_motorC 06A7           __end_of_motorD 071A  
    start_initialization 07FD                 ??___wmul 0074                 ??_motorA 0078  
               ??_motorB 0078                 ??_motorC 0078                 ??_motorD 0078  
              ___latbits 0003            __pcstackBANK0 0020               motorA@duty 0076  
             motorB@duty 0076               motorC@duty 0076               motorD@duty 0076  
         ___wmul@product 0074                 _LATAbits 010C                 _LATCbits 010E  
              main@i_287 0022        ___wmul@multiplier 0070           _PushSwitchRead 0522  
 __end_of_PushSwitchRead 052F          ?_PushSwitchRead 0070  
